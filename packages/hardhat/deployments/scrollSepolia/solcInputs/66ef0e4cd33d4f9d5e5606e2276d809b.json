{
  "language": "Solidity",
  "sources": {
    "contracts/CartorioDigital.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract CartorioDigital {\n    string public CidForms;\n    string public CidDoc;\n    uint[] public tokenIds;\n    bool public isSigned = false;\n    uint private counter = 0;\n    ContractDTO contr;\n\n    struct ContractDTO {\n        string contractCidForm;\n        string contractCidDoc;\n        bool contractIsSigned;\n        address ownerCon;\n    }\n\n    ContractDTO[] public contracts;\n\n    constructor() {\n        isSigned = false; // inicialmente não assinado\n    }\n\n    // Função para assinar o contratoForn\n\n    function setCidForms(string memory _CidForms) public {\n        CidForms = _CidForms;\n    }\n\n    function setCidDoc(string memory _CidDoc) public {\n        CidDoc = _CidDoc;\n    }\n\n    function signContract() public {\n        require(bytes(CidDoc).length > 0, \"CidDoc nao pode ser vazio.\");\n        require(!isSigned, \"Contrato ja assinado.\");\n        isSigned = true;\n        contr.contractCidDoc = CidDoc;\n        contr.contractCidForm = CidForms;\n        contr.contractIsSigned = true;\n        contr.ownerCon = msg.sender;\n        contracts.push(contr);\n    }\n\n    function getAllMyConstracts() public view returns (ContractDTO[] memory){\n        uint totalItemCount = contracts.length;      \n        uint currentIndex = 0;\n        ContractDTO[] memory items;\n\n        for(uint i=0; i <= totalItemCount; i++) {\n            if(contracts[i].ownerCon == msg.sender) {\n                items[currentIndex] = contracts[i];\n                currentIndex++;\n            }\n        }\n        return items;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}